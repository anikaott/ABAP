managed implementation in class zbp_abap_geberit_employee unique;
strict ( 2 );
with draft;

define behavior for ZR_ABAP_GEBERIT_EMPLOYEE alias Employee//alias <alias_name>
persistent table zabap_employee
draft table zabap_geberit_d
lock master
total etag LastChangedAt
authorization master ( instance )
//etag master <field_name>
{
  create;
  update;
  delete;
  association _Demands { create; with draft;  }
  association _Requests { create; with draft;  }

/*  action NotEnough result [1] $self; */

  draft action Activate optimized;
  draft action Discard;
  draft action Edit;
  draft determine action Prepare;
  draft action Resume;

  field( readonly, numbering : managed) Id;
  field( readonly ) CreatedAt, CreatedBy, LastChangedAt, LastChangedBy;

  mapping for zabap_employee corresponding {

     Id = id;
     EmployeeNumber = employee_number;
     Forname = forname;
     Surname = surname;
     EntryDate = entry_date;
     CreatedAt = created_at;
     CreatedBy = created_by;
     LastChangedAt = last_changed_at;
     LastChangedBy = last_changed_by;

  }
}




define behavior for ZR_ABAP_GEBERIT_DEMAND alias Demand//alias <alias_name>
persistent table zabap_demand
draft table zabap_demand_d
lock dependent by _Employee
authorization dependent by _Employee
//etag master <field_name>
{

  update;
  delete;


  field ( readonly, numbering : managed ) Id;
  field( readonly ) Employee, VacationDays, DateYear;
  field ( readonly ) CreatedBy, CreatedAt, LastChangedAt, LastChangedBy;
  association _Employee {with draft; }



  mapping for zabap_demand corresponding {
     Employee = employee;
     DateYear = date_year;
     VacationDays = vacation_days;
     CreatedAt = created_at;
     CreatedBy = created_by;
     LastChangedAt = last_changed_at;
     LastChangedBy = last_changed_by;
  }
  }



define behavior for ZR_ABAP_GEBERIT_REQUEST alias Request//alias <alias_name>
persistent table zabap_request
draft table zabap_request_d
lock dependent by _Employee
authorization dependent by _Employee
//etag master <field_name>
{

  update;
  delete;

  action ApproveRequest result [1] $self;
  action DeclineRequest result [1] $self;

  determination determinestatus on modify { create; }
  determination determinestatusrequestcomment on modify { field Commentary; }
  determination DetermineVacationDays on modify { create; }

  determine action ValidateRequest {
  validation ValidateDates;
  }
  validation ValidateDates on save { create; }

  field ( readonly, numbering : managed ) Id;
  field ( mandatory : create ) Approver, StartDate, EndDate;
  field ( readonly : update ) Approver, StartDate, EndDate;
  field ( readonly ) Applicant, Status, CreatedAt, CreatedBy, LastChangedAt, LastChangedBy;
  association _Employee {with draft; }

  mapping for zabap_request corresponding{
     Id = id;
     Applicant = applicant;
     Approver = approver;
     StartDate = start_date;
     EndDate = end_date;
     Commentary = commentary;
     Status = status;
     VacationDays = vacation_days;
     CreatedAt = created_at;
     CreatedBy = created_by;
     LastChangedAt = last_changed_at;
     LastChangedBy = last_changed_by;
 }
}